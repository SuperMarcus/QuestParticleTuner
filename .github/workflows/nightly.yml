name: Nightly build
on: [ push, pull_request ]

# set env (global) variables
env:
    ndkname: android-ndk-r22

jobs:
  build:
    # We will use this OS
    runs-on: ubuntu-latest
    # building a mod consists of a few steps
    steps:

    # Downloads and installs NDK 
    - uses: actions/checkout@v2
      name: Checkout NDK
      with:
        submodules: recursive
        lfs: true


    # # Downloads and installs NDK 
    # - name: Setup NDK
    #   id: setup-ndk
    #   uses: nttld/setup-ndk@v1.0.3
    #   with:
    #     ndk-version: r22b


    # create the ndkpath.txt file needed in our own compile scripts
    - name: Create ndkpath.txt
      run: |
        echo "$ANDROID_NDK_LATEST_HOME" > ${GITHUB_WORKSPACE}/ndkpath.txt
        cat ${GITHUB_WORKSPACE}/ndkpath.txt


    # Downloads QPM package for Beat Saber for Quest Development
    - name: Get QPM
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: main.yml
        name: QPM-ubuntu-x64
        path: QPM
        repo: sc2ad/QuestPackageManager


    # Collect dependencies and print them to console
    - name: QPM Collect
      run: |
        chmod +x ./QPM/QPM
        ./QPM/QPM collect


    # Accelerates QPM restore
    - name: QPM Dependencies Cache
      id: cache-qpm-deps
      uses: actions/cache@v2
      env:
        cache-name: cache-qpm-deps
      with:
        path: QPM_Temp
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('qpm.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-


    # Restore and resolve all dependencies from the package
    - name: QPM Restore
      run: ./QPM/QPM restore


    # Step added for workflow debugging 
    - name: List Post Restore
      run: |
        ls -la ${GITHUB_WORKSPACE}/extern/
        ls -la QPM_Temp


    # Creates the release and debug library binary files
    - name: Build
      run: |
        cd ${GITHUB_WORKSPACE}
        pwsh -Command ./build.ps1


    # Creates the QMOD package release file
    - name: Create Qmod package
      run: |
        cd ${GITHUB_WORKSPACE}
        pwsh -Command ./buildQMOD.ps1


    # get the library name, by checking against the module ID
    - name: Get Library Name
      id: libname
      shell: powershell
      run: |
        $mod = "./mod.json"
        $modJson = Get-Content $mod -Raw | ConvertFrom-Json
        $libname=$modJson.id.ToLower()
        Write-Output "::set-output name=NAME::$libname"
      

    # get the qmod name, by checking against the qmod file
    - name: Get Library Name
      id: qmodname
      run: |
        cd ${GITHUB_WORKSPACE}
        pattern="${module_id}*.qmod"
        files=( $pattern )
        echo ::set-output name=NAME::"${files[0]}"
    

    #uploads the normal .so as artifact
    - name: Upload release lib artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.libname.outputs.NAME }}
        path: ./libs/arm64-v8a/${{ steps.libname.outputs.NAME }}
        # if not found error obviously
        if-no-files-found: error


    #uploads the debug .so as artifact
    - name: Upload debug artifact
      uses: actions/upload-artifact@v2
      with:
        name: debug_${{ steps.libname.outputs.NAME }}
        path: ./obj/local/arm64-v8a/${{ steps.libname.outputs.NAME }}
        # if not found error obviously
        if-no-files-found: error


    # uploads the qmod package as artifact
    - name: Upload qmod artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.qmodname.outputs.NAME }}
        path: ./${{ steps.qmodname.outputs.NAME }}
        # if not found error obviously
        if-no-files-found: error
